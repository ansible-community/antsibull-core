# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

ansible_core_repo_url = https://github.com/ansible/ansible/
# Number of bytes to read or write at one time for network or file I/O:
chunksize = 4096
galaxy_url = https://galaxy.ansible.com/
# Maximum number of worker processes for parallel operations.
# It may be None to mean, use all available CPU cores:
process_max = none
pypi_url = https://pypi.org/
# Lower the thread_max value if you are seeing Galaxy timeouts in your docs build:
thread_max = 8
# Maximum number of times to retry an HTTP request (in case of timeouts
# and other transient problems:
max_retries = 10
# Maximum number of bytes of a file to read before writing it to compare
# contents. If contents are as expected, file is not overwritten. Set to 0 to
# disable:
file_check_content = 262144
# Uncomment the following after running `mkdir -p ~/.cache/antsibull/collections`
# to cache downloaded collection artefacts from Ansible Galaxy in that directory
# and speed up the docs build time:
#   collection_cache = ~/.cache/antsibull/collections
# Uncomment the following to trust the collection cache. This means that antsibull-core
# will assume that if the collection cache contains an artifact, it is the current one
# available on the Galaxy server. This avoids making a request to the Galaxy server to
# figure out the artifact's checksum and comparing it before trusting the cached
# artifact.
#   trust_collection_cache = true
# Uncomment the following after running `mkdir -p ~/.cache/antsibull/ansible-core`
# to cache downloaded ansible-core artefacts from PyPI in that directory and speed up
# the Ansible build time:
#   ansible_core_cache = ~/.cache/antsibull/ansible-core
# Uncomment the following to trust the ansible-core cache. This means that antsibull-core
# will assume that if the ansible-core cache contains an artifact, it is the current one
# available on PyPI. This avoids making a request to PyPI to figure out the artifact's
# checksum and comparing it before trusting the cached artifact.
#   trust_ansible_core_cache = true
logging_cfg = {
    version = 1.0
    outputs = {
        logfile = {
            output = twiggy.outputs.FileOutput
            args = [
                ~/antsibull.log
            ]
        }
        stderr = {
            output = twiggy.outputs.StreamOutput
            format = twiggy.formats.shell_format
        }
    }
    emitters = {
        # Log everything a user might be interested in to a log file.
        all = {
            # DEBUG is the most verbose level
            level = INFO
            output_name = logfile
        }
        # Log problems to stderr so they can be reported and taken care of.
        problems = {
            level = WARNING
            output_name = stderr
        }
    }
}
